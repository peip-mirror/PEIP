diff --git a/src/ABS/channel/PEIP_ABS_Connectable_Channel.php b/src/ABS/channel/PEIP_ABS_Connectable_Channel.php
deleted file mode 100644
index 883d3d4..0000000
--- a/src/ABS/channel/PEIP_ABS_Connectable_Channel.php
+++ /dev/null
@@ -1,158 +0,0 @@
-<?php
-
-/*
- * This file is part of the PEIP package.
- * (c) 2010 Timo Michna <timomichna/yahoo.de>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-/**
- * PEIP_ABS_Interceptable_Message_Channel
- *
- * @author Timo Michna <timomichna/yahoo.de>
- * @package PEIP
- * @subpackage channel
- * @implements PEIP_INF_Channel, PEIP_INF_Interceptable, PEIP_INF_Connectable
- */
-
-abstract class PEIP_ABS_Connectable_Channel
-    implements
-        PEIP_INF_Channel,
-        PEIP_INF_Connectable {
-
-    protected
-        $eventDispatcher,
-        $name,
-        $interceptors = array();
-
-    protected static
-        $sharedEventDispatcher;
-
-
-    /**
-     * @access public
-     * @param $name
-     * @return
-     */
-    public function __construct($name){
-        $this->name = $name;
-    }
-
-    /**
-     * @access public
-     * @return string the channel�s name
-     */
-    public function getName(){
-        return $this->name;
-    }
-
-    /**
-     * @access public
-     * @param PEIP_INF_Message $message
-     * @param integer $timeout
-     * @return
-     */
-    public function send(PEIP_INF_Message $message, $timeout = -1){
-        $this->dispatchInterceptor($message, 'preSend');
-        $this->doFireEvent('preSend', array('MESSAGE'=>$message));
-        $sent = $this->doSend($message);
-        $this->dispatchInterceptor($message, 'postSend', array('sent' => $sent));
-        $this->doFireEvent('postSend', array('MESSAGE'=>$message, 'SENT' => $sent));
-    }
-
-
-    /**
-     * @access protected
-     * @param PEIP_INF_Message $message
-     * @return
-     */
-    abstract protected function doSend(PEIP_INF_Message $message);
-
-
-    /**
-     * @access public
-     * @param string $name
-     * @param $listener
-     * @return
-     */
-    public function connect($name, $listener){
-        return $this->getEventDispatcher()->connect($name, $this, $listener);
-    }
-
-    /**
-     * @access public
-     * @param string $name
-     * @param $listener
-     * @return
-     */
-    public function disconnect($name, $listener){
-        return $this->getEventDispatcher()->disconnect($name, $this, $listener);
-    }
-
-    /**
-     * @access public
-     * @param string $name
-     * @return
-     */
-    public function hasListeners($name){
-        return $this->getEventDispatcher()->hasListeners($name, $this);
-    }
-
-    /**
-     * @access public
-     * @param string $name
-     * @return
-     */
-    public function getListeners($name){
-        return $this->getEventDispatcher()->getListeners($name, $this);
-    }
-
-    /**
-     * @access public
-     * @param PEIP_Object_Event_Dispatcher $dispatcher
-     * @param boolean $transferListners wether to transfer given Listeners to new dispatcher
-     * @return
-     */
-    public function setEventDispatcher(PEIP_Object_Event_Dispatcher $dispatcher, $transferListners = true){
-        if($transferListners && $this->eventDispatcher){
-            foreach($this->eventDispatcher->getEventNames($this) as $name){
-                if($this->eventDispatcher->hasListeners($name, $this)){
-                    foreach($this->eventDispatcher->getListeners($name, $this) as $listener){
-                        $dispatcher->connect($name, $this, $listener);
-                    }
-                }
-            }
-        }
-        $this->eventDispatcher = $dispatcher;
-    }
-
-    /**
-     * @access public
-     * @return PEIP_Object_Event_Dispatcher
-     */
-    public function getEventDispatcher(){
-        return $this->eventDispatcher ? $this->eventDispatcher : $this->eventDispatcher = self::getSharedEventDispatcher();
-    }
-
-    /**
-     * @access protected
-     * @static
-     * @return PEIP_Object_Event_Dispatcher
-     */
-    protected static function getSharedEventDispatcher(){
-        return self::$sharedEventDispatcher ? self::$sharedEventDispatcher : self::$sharedEventDispatcher = new PEIP_Object_Event_Dispatcher;
-    }
-
-    /**
-     * @access protected
-     * @param $name
-     * @param $headers
-     * @param $eventClass
-     * @return
-     */
-    protected function doFireEvent($name, array $headers = array(), $eventClass = false){
-        return $this->getEventDispatcher()->buildAndNotify($name, $this, $headers, $eventClass);
-    }
-}
-
diff --git a/src/ABS/channel/PEIP_ABS_Interceptable_Message_Channel.php b/src/ABS/channel/PEIP_ABS_Interceptable_Message_Channel.php
deleted file mode 100644
index 7a3772a..0000000
--- a/src/ABS/channel/PEIP_ABS_Interceptable_Message_Channel.php
+++ /dev/null
@@ -1,164 +0,0 @@
-<?php
-
-/*
- * This file is part of the PEIP package.
- * (c) 2010 Timo Michna <timomichna/yahoo.de>
- * 
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-/**
- * PEIP_ABS_Interceptable_Message_Channel 
- *
- * @author Timo Michna <timomichna/yahoo.de>
- * @package PEIP 
- * @subpackage channel 
- * @implements PEIP_INF_Channel, PEIP_INF_Interceptable, PEIP_INF_Connectable
- */
-
-abstract class PEIP_ABS_Interceptable_Message_Channel 
-    implements 
-        PEIP_INF_Channel,
-        PEIP_INF_Connectable {
-
-    protected 
-        $eventDispatcher,
-        $name,
-        $interceptors = array();
-    
-    protected static 
-        $sharedEventDispatcher; 
-
-    
-    /**
-     * @access public
-     * @param $name 
-     * @return 
-     */
-    public function __construct($name){
-        $this->name = $name;
-    }        
-    
-    /**
-     * @access public
-     * @return string the channel�s name
-     */
-    public function getName(){
-        return $this->name;
-    }
- 
-    /**
-     * @access public
-     * @param PEIP_INF_Message $message 
-     * @param integer $timeout 
-     * @return 
-     */
-    public function send(PEIP_INF_Message $message, $timeout = -1){
-        $this->doFireEvent('preSend', array('MESSAGE'=>$message));
-        $sent = $this->doSend($message);
-       // $this->doFireEvent('postSend', array('MESSAGE'=>$message, 'SENT' => $sent));
-    }
-
-    
-    /**
-     * @access protected
-     * @param PEIP_INF_Message $message 
-     * @return 
-     */
-    abstract protected function doSend(PEIP_INF_Message $message);
-    
-    
-    /**
-     * @access public
-     * @param string $name 
-     * @param Callable|PEIP_INF_Handler $listener
-     * @return 
-     */
-    public function connect($name, $listener){
-        return $this->getEventDispatcher()->connect($name, $this, $listener);
-    }   
- 
-    /**
-     * @access public
-     * @param string $name 
-     * @param Callable|PEIP_INF_Handler $listener
-     * @return 
-     */
-    public function disconnect($name, $listener){
-        return $this->getEventDispatcher()->disconnect($name, $this, $listener);
-    }   
-
-    /**
-     * @access public
-     * @param string $name
-     * @return
-     */
-    public function disconnectAll($name){
-        return $this->getEventDispatcher()->disconnectAll($name, $this);
-    }
-
-    /**
-     * @access public
-     * @param string $name 
-     * @return 
-     */
-    public function hasListeners($name){
-        return $this->getEventDispatcher()->hasListeners($name, $this);
-    }
-       
-    /**
-     * @access public
-     * @param string $name 
-     * @return 
-     */
-    public function getListeners($name){
-        return $this->getEventDispatcher()->getListeners($name, $this);
-    }
-        
-    /**
-     * @access public
-     * @param PEIP_Object_Event_Dispatcher $dispatcher 
-     * @param boolean $transferListners wether to transfer given Listeners to new dispatcher
-     * @return 
-     */
-    public function setEventDispatcher(PEIP_Object_Event_Dispatcher $dispatcher, $transferListners = true){
-        if($transferListners && $this->eventDispatcher){
-            foreach($this->eventDispatcher->getEventNames($this) as $name){
-                if($this->eventDispatcher->hasListeners($name, $this)){
-                    foreach($this->eventDispatcher->getListeners($name, $this) as $listener){
-                        $dispatcher->connect($name, $this, $listener);  
-                    }
-                }       
-            }   
-        }   
-        $this->eventDispatcher = $dispatcher;       
-    }
-       
-    /**
-     * @access public
-     * @return PEIP_Object_Event_Dispatcher
-     */
-    public function getEventDispatcher(){
-        return $this->eventDispatcher ? $this->eventDispatcher : $this->eventDispatcher = self::getSharedEventDispatcher();
-    }   
-
-    /**
-     * @access protected
-     * @static
-     * @return PEIP_Object_Event_Dispatcher
-     */    
-    protected static function getSharedEventDispatcher(){
-        return self::$sharedEventDispatcher ? self::$sharedEventDispatcher : self::$sharedEventDispatcher = new PEIP_Class_Event_Dispatcher;
-    }
-   
-    /**
-     * @access protected
-     * @param $name 
-     * @param $headers 
-     * @param $eventClass 
-     * @return 
-     */
-    protected function doFireEvent($name, array $headers = array(), $eventClass = false){ 
-        return $this->getEventDispatcher()->buildAndNotify($name, $this, $headers, 'PEIP_Event');
-    }
-}
\ No newline at end of file
diff --git a/src/ABS/channel/PEIP_ABS_Pollable_Channel.php b/src/ABS/channel/PEIP_ABS_Pollable_Channel.php
old mode 100755
new mode 100644
index bc95619..dfd3bf8
--- a/src/ABS/channel/PEIP_ABS_Pollable_Channel.php
+++ b/src/ABS/channel/PEIP_ABS_Pollable_Channel.php
@@ -1,98 +1,96 @@
-<?php
-
-/*
- * This file is part of the PEIP package.
- * (c) 2010 Timo Michna <timomichna/yahoo.de>
- * 
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-/**
- * PEIP_ABS_Pollable_Channel 
- *
- * @author Timo Michna <timomichna/yahoo.de>
- * @package PEIP 
- * @subpackage channel 
- * @extends PEIP_ABS_Interceptable_Message_Channel
- * @implements PEIP_INF_Connectable, PEIP_INF_Interceptable, PEIP_INF_Channel, PEIP_INF_Pollable_Channel
- */
-
-
-class PEIP_ABS_Pollable_Channel     
-    extends PEIP_ABS_Interceptable_Message_Channel 
-    implements PEIP_INF_Pollable_Channel {
-
-    protected 
-        $messages = array();
-        
-    
-    /**
-     * @access protected
-     * @param $message 
-     * @return 
-     */
-    protected function doSend(PEIP_INF_Message $message){
-        $this->messages[] = $message;        
-    }
-    
-    
-    /**
-     * @access public
-     * @param $timeout 
-     * @return 
-     */
-    public function receive($timeout = -1){
-        $this->getInterceptorDispatcher()->notify('preReceive', array($this));
-        $message = NULL;
-        if($timeout == 0){
-            $message = $this->getMessage(); 
-        }elseif($timeout < 0){
-            while(!$message = $this->getMessage()){
-                                
-            }
-        }else{
-            $time = time() + $timeout;
-            while(($time > time()) && !$message = $this->getMessage()){
-                
-            }       
-        }
-        $this->getInterceptorDispatcher()->notify('preReceive', array($this));
-        return $message;
-    }
-
-    
-    /**
-     * @access protected
-     * @return 
-     */
-    protected function getMessage(){
-        return array_shift($this->messages);
-    }
-    
-    
-    /**
-     * @access public
-     * @return 
-     */
-    public function clear(){
-        $this->messages = array();
-    }
-    
-    
-    /**
-     * @access public
-     * @param $selector 
-     * @return 
-     */
-    public function purge(PEIP_INF_Message_Selector $selector){
-        foreach($this->messages as $key=>$message){
-            if(!$selector->acceptMessage($message)){
-                unset($this->messages[$key]);   
-            }
-        }
-        return $this->messages;
-    }
-        
-    
-}
+<?php
+
+/*
+ * This file is part of the PEIP package.
+ * (c) 2010 Timo Michna <timomichna/yahoo.de>
+ * 
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * PEIP_ABS_Pollable_Channel 
+ *
+ * @author Timo Michna <timomichna/yahoo.de>
+ * @package PEIP 
+ * @subpackage channel 
+ * @extends PEIP_ABS_Channel
+ * @implements PEIP_INF_Connectable, PEIP_INF_Channel, PEIP_INF_Pollable_Channel
+ */
+
+
+class PEIP_ABS_Pollable_Channel     
+    extends PEIP_ABS_Channel
+    implements PEIP_INF_Pollable_Channel {
+
+    protected 
+        $messages = array();
+        
+    
+    /**
+     * @access protected
+     * @param $message 
+     * @return 
+     */
+    protected function doSend(PEIP_INF_Message $message){
+        $this->messages[] = $message;        
+    }
+    
+    
+    /**
+     * @access public
+     * @param $timeout 
+     * @return 
+     */
+    public function receive($timeout = -1){
+        $message = NULL;
+        if($timeout == 0){
+            $message = $this->getMessage(); 
+        }elseif($timeout < 0){
+            while(!$message = $this->getMessage()){
+                                
+            }
+        }else{
+            $time = time() + $timeout;
+            while(($time > time()) && !$message = $this->getMessage()){
+                
+            }       
+        }
+        return $message;
+    }
+
+    
+    /**
+     * @access protected
+     * @return 
+     */
+    protected function getMessage(){
+        return array_shift($this->messages);
+    }
+    
+    
+    /**
+     * @access public
+     * @return 
+     */
+    public function clear(){
+        $this->messages = array();
+    }
+    
+    
+    /**
+     * @access public
+     * @param $selector 
+     * @return 
+     */
+    public function purge(PEIP_INF_Message_Selector $selector){
+        foreach($this->messages as $key=>$message){
+            if(!$selector->acceptMessage($message)){
+                unset($this->messages[$key]);   
+            }
+        }
+        return $this->messages;
+    }
+        
+    
+}
diff --git a/src/ABS/channel/PEIP_ABS_Subscribable_Channel.php b/src/ABS/channel/PEIP_ABS_Subscribable_Channel.php
old mode 100755
new mode 100644
index b21907e..24d11f2
--- a/src/ABS/channel/PEIP_ABS_Subscribable_Channel.php
+++ b/src/ABS/channel/PEIP_ABS_Subscribable_Channel.php
@@ -1,85 +1,85 @@
-<?php
-
-/*
- * This file is part of the PEIP package.
- * (c) 2010 Timo Michna <timomichna/yahoo.de>
- * 
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-/**
- * PEIP_ABS_Subscribable_Channel 
- * Abstract base class for subscribable channels
- *
- * @author Timo Michna <timomichna/yahoo.de>
- * @package PEIP 
- * @subpackage channel 
- * @extends PEIP_ABS_Interceptable_Message_Channel
- * @implements PEIP_INF_Connectable, PEIP_INF_Interceptable, PEIP_INF_Channel, PEIP_INF_Subscribable_Channel
- */
-
-
-abstract class PEIP_ABS_Subscribable_Channel 
-    extends PEIP_ABS_Interceptable_Message_Channel 
-    implements PEIP_INF_Subscribable_Channel{
-
-    protected $messageDispatcher;   
-       
-    /**
-     * Subscribes a given listener to the channel
-     * 
-     * @event subscribe
-     * @access public
-     * @param Callable|PEIP_INF_Handler  $handler the listener to subscribe
-     * @return 
-     */
-    public function subscribe($handler){ 
-        PEIP_Test::ensureHandler($handler);
-        $this->getMessageDispatcher()->connect($handler);
-        $this->doFireEvent('subscribe', array('SUBSCRIBER'=>$handler));
-    }
-      
-    /**
-     * Unsubscribes a given listener from the channel
-     * 
-     * @event u